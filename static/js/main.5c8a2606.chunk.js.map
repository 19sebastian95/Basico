{"version":3,"sources":["components/Header.jsx","components/Footer.js","components/Producto.js","components/CarroCompras.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","Footer","fecha","Producto","products","shoppingCart","listProducts","addProductCar","id","nombre","precio","type","onClick","carProducts","filter","newProduct","selectProduct","productDelete","deleteProducts","deleteProduct","CarroCompras","setProductos","map","key","App","useState","date","Date","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0KAWeA,EATA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEb,OACI,oCACI,wBAAIC,UAAU,cAAcD,KCMzBE,EAVA,SAAC,GAAY,IAAXC,EAAU,EAAVA,MACb,OACI,oCACI,gCACI,gEAAwCA,M,OC0CzCC,EA9CE,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,SAAUC,EAAgD,EAAhDA,aAAcC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,cAE9CC,EAAuBJ,EAAvBI,GAAIC,EAAmBL,EAAnBK,OAAQC,EAAWN,EAAXM,OAmBpB,OACI,oCACI,+BAAKD,EAAL,MAAgBC,GAGfJ,EAEG,4BACIK,KAAK,SACLC,QAAS,kBAxBH,SAAAJ,GAClB,IAAMK,EAAcP,EAAaQ,QAAO,SAAAC,GAAU,OAAIA,EAAWP,KAAOA,KAAI,GAC5ED,EAAc,GAAD,mBACNF,GADM,CAETQ,KAoBuBG,CAAcR,KAFjC,YAOA,4BACIG,KAAK,SACLC,QAAS,kBArBH,SAAAJ,GAClB,IAAMS,EAAgBZ,EAAaS,QAAO,SAAAI,GAAc,OAAIA,EAAeV,KAAOA,KAClFD,EAAcU,GAmBaE,CAAcX,KAFjC,cCdDY,G,MAlBM,SAAC,GAAD,IAAEf,EAAF,EAAEA,aAAcgB,EAAhB,EAAgBA,aAAhB,OACjB,yBAAKrB,UAAU,WACX,kDAEkB,IAAjBK,EACG,6DAEJA,EAAaiB,KAAK,SAAAlB,GAAQ,OACtB,kBAAC,EAAD,CACImB,IAAKnB,EAASI,GACdJ,SAAUA,EACVC,aAAcA,EACdgB,aAAcA,UCgCfG,MA3Cf,WAAe,MAGwBC,mBAAS,CAC5C,CAAEjB,GAAI,EAAGC,OAAQ,SAAUC,OAAQ,IACnC,CAAEF,GAAI,EAAGC,OAAQ,UAAWC,OAAQ,IACpC,CAAEF,GAAI,EAAGC,OAAQ,OAAQC,OAAQ,IACjC,CAAEF,GAAI,EAAGC,OAAQ,QAASC,OAAQ,KAClC,IARW,mBAGNJ,EAHM,KAGQe,EAHR,OAWyBI,mBAAS,IAXlC,mBAWNpB,EAXM,KAWQE,EAXR,KAcPmB,GAAO,IAAIC,MAAOC,cAExB,OACE,oCACE,kBAAC,EAAD,CACE7B,OAAO,mBAET,kDACCO,EAAagB,KAAI,SAAAlB,GAAQ,OACxB,kBAAC,EAAD,CACEmB,IAAKnB,EAASI,GACdJ,SAAUA,EACVC,aAAcA,EACdC,aAAcA,EACdC,cAAeA,OAInB,kBAAC,EAAD,CACEF,aAAcA,EACdgB,aAAcA,IAEhB,kBAAC,EAAD,CACEK,KAAMA,MC/BMG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5c8a2606.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = ({titulo}) => {\r\n\r\n    return(\r\n        <>\r\n            <h1 className='encabezado'>{titulo}</h1>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Footer = ({fecha}) =>{\r\n    return (\r\n        <>\r\n            <footer>\r\n                <p>Todos los derechos reservados &copy;{fecha}</p>\r\n            </footer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react'\r\n\r\nconst Producto = ({ products, shoppingCart, listProducts, addProductCar }) => {\r\n\r\n    const { id, nombre, precio } = products;\r\n\r\n    //Agregar prodcuto al carrito\r\n\r\n    const selectProduct = id => {\r\n        const carProducts = listProducts.filter(newProduct => newProduct.id === id)[0];\r\n        addProductCar([\r\n            ...shoppingCart,\r\n            carProducts\r\n        ]);\r\n    }\r\n\r\n    //Eliminar Prodcurto del carrito de compras\r\n\r\n    const deleteProduct = id => {\r\n        const productDelete = shoppingCart.filter(deleteProducts => deleteProducts.id !== id);\r\n        addProductCar(productDelete)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p> {nombre}, ${precio}\r\n            </p>\r\n\r\n            {listProducts\r\n                ?\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={() => selectProduct(id)}\r\n                >\r\n                    Comparar\r\n                </button>\r\n                :\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={() => deleteProduct(id)}\r\n                >\r\n                    Eliminar\r\n                </button>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Producto;","import\tReact, { PureComponent } from 'react';\r\nimport 'components/CarroCompras.css';\r\nimport Product from 'components/Producto';\r\n\r\n\r\nconst CarroCompras = ({shoppingCart, setProductos}) => (\r\n    <div className=\"carrito\">\r\n        <h2>Carrito de Compras</h2>\r\n        \r\n        {shoppingCart === 0 ? \r\n            <p>No hay prosuctos en el carrito</p>\r\n        :\r\n        shoppingCart.map( products =>(\r\n            <Product \r\n                key={products.id}\r\n                products={products}\r\n                shoppingCart={shoppingCart}\r\n                setProductos={setProductos}\r\n            />\r\n        ))}\r\n    </div>\r\n)\r\n\r\nexport default CarroCompras;","import React, { useState } from 'react';\nimport Header from 'components/Header';\nimport Footer from 'components/Footer';\nimport Producto from 'components/Producto';\nimport CarroCompras from 'components/CarroCompras';\n\nfunction App() {\n\n  //Listado de productos\n  const [listProducts, setProductos] = useState([\n    { id: 1, nombre: 'Camisa', precio: 50 },\n    { id: 2, nombre: 'Pantalo', precio: 40 },\n    { id: 3, nombre: 'Cuco', precio: 30 },\n    { id: 4, nombre: 'Gorra', precio: 20 },\n  ],[]);\n\n  //Carrito de compras\n  const [shoppingCart, addProductCar] = useState([]);\n  \n  //Obtener fecha\n  const date = new Date().getFullYear();\n\n  return (\n    <>\n      <Header\n        titulo='Tienda virtual'\n      />\n      <h1>Lista de productos</h1>\n      {listProducts.map(products => (\n        <Producto\n          key={products.id}\n          products={products}\n          shoppingCart={shoppingCart}\n          listProducts={listProducts}\n          addProductCar={addProductCar}\n        />\n      ))}\n\n      <CarroCompras \n        shoppingCart={shoppingCart}\n        setProductos={setProductos}\n      />\n      <Footer\n        date={date}\n      />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}